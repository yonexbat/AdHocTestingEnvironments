using AdHocTestingEnvironments.Services.Implementations;
using AdHocTestingEnvironments.Services.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace AdHocTestingEnvironmentsTests
{
    public class GitClientServiceTest
    {

        [Fact]
        public async Task TestStartEnv()
        {
            IGitClientService service = CreateClient();
            await service.CheckOut();

            await service.StartEnvironment(new AdHocTestingEnvironments.Model.Kubernetes.CreateEnvironmentInstanceData()
            {
                Image = "claudeglauser/sample-webapp:latest",
                InitSqlScript = InitScript,
                Name = "testwzei",
            });
        }


        private IGitClientService CreateClient()
        {
            IConfiguration configuration = GetConfiguration();
            string gitUrl = configuration.GetValue<string>("GitUrl");
            string user = configuration.GetValue<string>("GitUser");
            string pw = configuration.GetValue<string>("GitPw");

            var inMemorySettings = new Dictionary<string, string> {
                {"GitUrl", gitUrl},
                {"GitUser", user},
                {"GitPw", pw},
            };

            IConfiguration mockConfiguration = new ConfigurationBuilder()
                .AddInMemoryCollection(inMemorySettings)
                .Build();

            var mockLogger = new Mock<ILogger<GitClientService>>().Object;

            IKubernetesObjectBuilder ob = new KubernetesObjectBuilder();

            IGitClientService service = new GitClientService(mockConfiguration, ob, mockLogger);
            return service;
        }

        private IConfiguration GetConfiguration()
        {
            var builder = new ConfigurationBuilder()
                .AddUserSecrets<KubernetesClientServiceTest>();

            return builder.Build();
        }

        private const string InitScript = @"
CREATE DATABASE test;
\connect test;

CREATE TABLE IF NOT EXISTS ""__EFMigrationsHistory"" (
    ""MigrationId"" character varying(150) NOT NULL,
    ""ProductVersion"" character varying(32) NOT NULL,
    CONSTRAINT ""PK___EFMigrationsHistory"" PRIMARY KEY(""MigrationId"")
);

START TRANSACTION;

        CREATE TABLE ""GuestBookEntry"" (
    ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
    ""Text"" text NULL,
    CONSTRAINT ""PK_GuestBookEntry"" PRIMARY KEY(""Id"")
);

INSERT INTO ""__EFMigrationsHistory"" (""MigrationId"", ""ProductVersion"")
VALUES('20210626104025_InitialCreate', '5.0.7');

COMMIT;
";
    }
}
